using System;
using MySql.Data.MySqlClient;

class Program
{
    static void Main()
    {
        string connexionString = "server=localhost;database=LivinParis;user=root;password=Eg.19052005;";

        using (MySqlConnection connexion = new MySqlConnection(connexionString))
        {
            try
            {
                connexion.Open();
                Console.WriteLine("Connexion réussie à MySQL");

                Console.Write("Entrez votre identifiant (CL001 ou CU001) : ");
                string idUtilisateur = Console.ReadLine().ToUpper();

                string typeUtilisateur = idUtilisateur.StartsWith("CL") ? "client" :
                                         idUtilisateur.StartsWith("CU") ? "cuisinier" : "";

                if (string.IsNullOrEmpty(typeUtilisateur))
                {
                    Console.WriteLine("Identifiant invalide");
                    return;
                }

                if (typeUtilisateur == "client")
                {
                    MenuClient(connexion, idUtilisateur);
                }
                else
                {
                    MenuCuisinier(connexion, idUtilisateur);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Erreur : " + ex.Message);
            }
        }
    }

    static void MenuClient(MySqlConnection connexion, string idClient)
    {
        while (true)
        {
            Console.WriteLine("\nMENU CLIENT");
            Console.WriteLine("1. Voir les plats");
            Console.WriteLine("2. Commander");
            Console.WriteLine("3. Quitter");
            Console.Write("Choix : ");
            string choix = Console.ReadLine();

            if (choix == "1")
            {
                AfficherPlats(connexion);
            }
            else if (choix == "2")
            {
                CommanderPlat(connexion, idClient);
            }
            else if (choix == "3")
            {
                break;
            }
            else
            {
                Console.WriteLine("Choix invalide");
            }
        }
    }

    static void AfficherPlats(MySqlConnection connexion)
    {
        string requete = "SELECT id, nom, prix, description FROM Plats WHERE disponible = 1";

        Console.WriteLine("\nLISTE DES PLATS DISPONIBLES");
        Console.WriteLine("---------------------------");

        using (MySqlCommand cmd = new MySqlCommand(requete, connexion))
        {
            using (var reader = cmd.ExecuteReader())
            {
                while (reader.Read())
                {
                    Console.WriteLine($"ID: {reader["id"]} - {reader["nom"]}");
                    Console.WriteLine($"Prix: {reader["prix"]} EUR");
                    Console.WriteLine($"Description: {reader["description"]}");
                    Console.WriteLine("---------------------------");
                }
            }
        }
    }

    static void CommanderPlat(MySqlConnection connexion, string idClient)
    {
        // Vérifier si le client existe dans la table Clients
        string checkClientQuery = "SELECT COUNT(*) FROM Clients WHERE id_utilisateur = @idClient";
        using (MySqlCommand checkCmd = new MySqlCommand(checkClientQuery, connexion))
        {
            checkCmd.Parameters.AddWithValue("@idClient", idClient);
            int clientExists = Convert.ToInt32(checkCmd.ExecuteScalar());

            if (clientExists == 0)
            {
                Console.WriteLine("Erreur : L'identifiant client n'existe pas.");
                return;
            }
        }

        AfficherPlats(connexion);

        Console.Write("\nEntrez l'ID du plat à commander : ");
        int idPlat = Convert.ToInt32(Console.ReadLine());

        Console.Write("Quantité : ");
        int quantite = Convert.ToInt32(Console.ReadLine());

        string requetePlat = "SELECT cuisinier_id, prix FROM Plats WHERE id = @idPlat AND disponible = 1";
        string idCuisinier = "";
        decimal prix = 0;

        using (MySqlCommand cmd = new MySqlCommand(requetePlat, connexion))
        {
            cmd.Parameters.AddWithValue("@idPlat", idPlat);
            using (var reader = cmd.ExecuteReader())
            {
                if (reader.Read())
                {
                    idCuisinier = reader["cuisinier_id"].ToString();
                    prix = Convert.ToDecimal(reader["prix"]);
                }
                else
                {
                    Console.WriteLine("Plat indisponible");
                    return;
                }
            }
        }

        decimal total = prix * quantite;

        string requeteCommande = "INSERT INTO Commandes (client_id, cuisinier_id, total, date_commande) " +
                               "VALUES (@idClient, @idCuisinier, @total, NOW())";

        using (MySqlCommand cmd = new MySqlCommand(requeteCommande, connexion))
        {
            cmd.Parameters.AddWithValue("@idClient", idClient);
            cmd.Parameters.AddWithValue("@idCuisinier", idCuisinier);
            cmd.Parameters.AddWithValue("@total", total);
            cmd.ExecuteNonQuery();
        }

        Console.WriteLine("Commande effectuée avec succès !");
    }

    static void MenuCuisinier(MySqlConnection connexion, string idCuisinier)
    {
        while (true)
        {
            Console.WriteLine("\nMENU CUISINIER");
            Console.WriteLine("1. Ajouter un plat");
            Console.WriteLine("2. Voir mes plats");
            Console.WriteLine("3. Quitter");
            Console.Write("Choix : ");
            string choix = Console.ReadLine();

            if (choix == "1")
            {
                AjouterPlat(connexion, idCuisinier);
            }
            else if (choix == "2")
            {
                AfficherPlatsCuisinier(connexion, idCuisinier);
            }
            else if (choix == "3")
            {
                break;
            }
            else
            {
                Console.WriteLine("Choix invalide");
            }
        }
    }

    static void AjouterPlat(MySqlConnection connexion, string idCuisinier)
    {
        Console.WriteLine("\nNOUVEAU PLAT");

        Console.Write("Nom : ");
        string nom = Console.ReadLine();

        Console.Write("Description : ");
        string description = Console.ReadLine();

        Console.Write("Prix : ");
        decimal prix = Convert.ToDecimal(Console.ReadLine());

        string requete = "INSERT INTO Plats (cuisinier_id, nom, description, prix, disponible) " +
                        "VALUES (@idCuisinier, @nom, @description, @prix, 1)";

        using (MySqlCommand cmd = new MySqlCommand(requete, connexion))
        {
            cmd.Parameters.AddWithValue("@idCuisinier", idCuisinier);
            cmd.Parameters.AddWithValue("@nom", nom);
            cmd.Parameters.AddWithValue("@description", description);
            cmd.Parameters.AddWithValue("@prix", prix);
            cmd.ExecuteNonQuery();
        }

        Console.WriteLine("Plat ajouté avec succès !");
    }

    static void AfficherPlatsCuisinier(MySqlConnection connexion, string idCuisinier)
    {
        string requete = "SELECT id, nom, prix, description FROM Plats WHERE cuisinier_id = @idCuisinier";

        Console.WriteLine("\nMES PLATS");
        Console.WriteLine("---------");

        using (MySqlCommand cmd = new MySqlCommand(requete, connexion))
        {
            cmd.Parameters.AddWithValue("@idCuisinier", idCuisinier);
            using (var reader = cmd.ExecuteReader())
            {
                while (reader.Read())
                {
                    Console.WriteLine($"ID: {reader["id"]} - {reader["nom"]}");
                    Console.WriteLine($"Prix: {reader["prix"]} EUR");
                    Console.WriteLine($"Description: {reader["description"]}");
                    Console.WriteLine("---------");
                }
            }
        }
    }
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////

-- Création de la base de données
DROP DATABASE IF EXISTS LivinParis;
CREATE DATABASE LivinParis;
USE LivinParis;

-- Table Utilisateurs
CREATE TABLE IF NOT EXISTS Utilisateurs (
    id VARCHAR(10) PRIMARY KEY,
    nom VARCHAR(50) NOT NULL,
    prenom VARCHAR(50) NOT NULL,
    adresse VARCHAR(255) NOT NULL,
    telephone VARCHAR(20) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    mot_de_passe VARCHAR(255) NOT NULL,
    type_utilisateur ENUM('client', 'cuisinier') NOT NULL,
    date_inscription DATETIME DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB;

-- Table Clients
CREATE TABLE IF NOT EXISTS Clients (
    id_utilisateur VARCHAR(10) PRIMARY KEY,
    est_entreprise BOOLEAN DEFAULT FALSE,
    nom_entreprise VARCHAR(100),
    nom_referent VARCHAR(50),
    FOREIGN KEY (id_utilisateur) REFERENCES Utilisateurs(id) ON DELETE CASCADE
) ENGINE=InnoDB;

-- Table Cuisiniers
CREATE TABLE IF NOT EXISTS Cuisiniers (
    id_utilisateur VARCHAR(10) PRIMARY KEY,
    note_moyenne DECIMAL(3,2) DEFAULT 0.0,
    nb_livraisons INT DEFAULT 0,
    FOREIGN KEY (id_utilisateur) REFERENCES Utilisateurs(id) ON DELETE CASCADE
) ENGINE=InnoDB;

-- Table Plats
CREATE TABLE IF NOT EXISTS Plats (
    id INT AUTO_INCREMENT PRIMARY KEY,
    cuisinier_id VARCHAR(10) NOT NULL,
    nom VARCHAR(100) NOT NULL,
    description TEXT,
    type ENUM('entree', 'plat_principal', 'dessert') NOT NULL,
    nb_personnes INT NOT NULL,
    date_fabrication DATE NOT NULL,
    date_peremption DATE NOT NULL,
    prix DECIMAL(10,2) NOT NULL,
    nationalite VARCHAR(50),
    regime VARCHAR(50),
    ingredients TEXT,
    disponible BOOLEAN DEFAULT TRUE,
    FOREIGN KEY (cuisinier_id) REFERENCES Cuisiniers(id_utilisateur) ON DELETE CASCADE
) ENGINE=InnoDB;

-- Table Commandes
CREATE TABLE IF NOT EXISTS Commandes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    client_id VARCHAR(10) NOT NULL,
    cuisinier_id VARCHAR(10) NOT NULL,
    date_commande DATETIME DEFAULT CURRENT_TIMESTAMP,
    total DECIMAL(10,2) NOT NULL,
    statut ENUM('en_attente', 'preparation', 'livraison', 'livree', 'annulee') DEFAULT 'en_attente',
    FOREIGN KEY (client_id) REFERENCES Clients(id_utilisateur),
    FOREIGN KEY (cuisinier_id) REFERENCES Cuisiniers(id_utilisateur)
) ENGINE=InnoDB;

-- Table PlatsCommandes
CREATE TABLE IF NOT EXISTS PlatsCommandes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    commande_id INT NOT NULL,
    plat_id INT NOT NULL,
    quantite INT NOT NULL,
    prix_unitaire DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (commande_id) REFERENCES Commandes(id) ON DELETE CASCADE,
    FOREIGN KEY (plat_id) REFERENCES Plats(id)
) ENGINE=InnoDB;

-- Insertion du cuisinier par défaut
INSERT INTO Utilisateurs 
(id, nom, prenom, adresse, telephone, email, mot_de_passe, type_utilisateur)
VALUES 
('CU001', 'Chef', 'Français', '1 Rue de la Cuisine, Paris', '0102030405', 'chef@livinparis.fr', SHA2('password123', 256), 'cuisinier');

INSERT INTO Cuisiniers (id_utilisateur) VALUES ('CU001');

-- Insertion des plats français de base
INSERT INTO Plats 
(id, cuisinier_id, nom, description, type, nb_personnes, date_fabrication, date_peremption, prix, disponible)
VALUES 
(1, 'CU001', 'Boeuf Bourguignon', 'Ragoût de bœuf mijoté au vin rouge', 'plat_principal', 4, CURDATE(), DATE_ADD(CURDATE(), INTERVAL 3 DAY), 15.50, TRUE),
(2, 'CU001', 'Coq au Vin', 'Poulet mijoté au vin rouge', 'plat_principal', 4, CURDATE(), DATE_ADD(CURDATE(), INTERVAL 3 DAY), 14.00, TRUE),
(3, 'CU001', 'Ratatouille', 'Légumes provençaux mijotés', 'plat_principal', 4, CURDATE(), DATE_ADD(CURDATE(), INTERVAL 3 DAY), 11.00, TRUE),
(4, 'CU001', 'Quiche Lorraine', 'Tarte salée aux lardons et fromage', 'entree', 2, CURDATE(), DATE_ADD(CURDATE(), INTERVAL 3 DAY), 8.50, TRUE),
(5, 'CU001', 'Soupe à l\'Oignon', 'Soupe aux oignons gratinée', 'entree', 2, CURDATE(), DATE_ADD(CURDATE(), INTERVAL 3 DAY), 6.50, TRUE),
(6, 'CU001', 'Cassoulet', 'Ragoût de haricots blancs et viandes', 'plat_principal', 4, CURDATE(), DATE_ADD(CURDATE(), INTERVAL 3 DAY), 13.00, TRUE),
(7, 'CU001', 'Croque-Monsieur', 'Sandwich grillé au jambon et fromage', 'entree', 1, CURDATE(), DATE_ADD(CURDATE(), INTERVAL 3 DAY), 7.00, TRUE),
(8, 'CU001', 'Tarte Tatin', 'Tarte renversée aux pommes caramélisées', 'dessert', 2, CURDATE(), DATE_ADD(CURDATE(), INTERVAL 3 DAY), 5.50, TRUE),
(9, 'CU001', 'Salade Niçoise', 'Salade composée méditerranéenne', 'entree', 1, CURDATE(), DATE_ADD(CURDATE(), INTERVAL 3 DAY), 9.50, TRUE),
(10, 'CU001', 'Blanquette de Veau', 'Ragoût de veau à la sauce crémée', 'plat_principal', 4, CURDATE(), DATE_ADD(CURDATE(), INTERVAL 3 DAY), 16.00, TRUE);

-- Création d'un client de test
INSERT INTO Utilisateurs 
(id, nom, prenom, adresse, telephone, email, mot_de_passe, type_utilisateur)
VALUES 
('CL001', 'Dupont', 'Jean', '15 Avenue des Champs, Paris', '0607080910', 'jean.dupont@email.com', SHA2('client123', 256), 'client');

INSERT INTO Clients (id_utilisateur) VALUES ('CL001');
