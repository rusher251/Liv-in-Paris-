using System;
using System.Collections.Generic; // Required for List
using MySql.Data.MySqlClient;

class Program
{
    static void Main()
    {
        string connectionString = "server=localhost;database=LivinParis;user=root;password=Eg.19052005;";
        MySqlConnection connection = new MySqlConnection(connectionString);

        // Initialize platsExistants
        List<string> platsExistants = new List<string>
        {
            "Boeuf Bourguignon - 15.50‚Ç¨",
            "Coq au Vin - 14.00‚Ç¨",
            "Ratatouille - 11.00‚Ç¨",
            "Quiche Lorraine - 8.50‚Ç¨",
            "Soupe √† l'Oignon - 6.50‚Ç¨",
            "Cassoulet - 13.00‚Ç¨"
        };

        try
        {
            connection.Open();
            Console.WriteLine("‚úÖ Connexion r√©ussie √† MySQL !");

            Console.Write("Entrez votre identifiant (ex: CL001 ou CU001) : ");
            string userId = Console.ReadLine();

            string userType = "";
            if (userId.StartsWith("CL")) userType = "client";
            else if (userId.StartsWith("CU")) userType = "cuisinier";
            else
            {
                Console.WriteLine("‚ùå Identifiant invalide. Il doit commencer par CL ou CU.");
                return;
            }

            MySqlCommand checkUserCmd = new MySqlCommand($"SELECT * FROM Utilisateurs WHERE id = @id", connection);
            checkUserCmd.Parameters.AddWithValue("@id", userId);
            var reader = checkUserCmd.ExecuteReader();

            if (!reader.HasRows)
            {
                reader.Close();
                Console.Write("Nom : ");
                string nom = Console.ReadLine();
                Console.Write("Pr√©nom : ");
                string prenom = Console.ReadLine();
                Console.Write("Adresse : ");
                string adresse = Console.ReadLine();
                Console.Write("T√©l√©phone : ");
                string telephone = Console.ReadLine();
                Console.Write("Email : ");
                string email = Console.ReadLine();
                Console.Write("Mot de passe : ");
                string motDePasse = Console.ReadLine();

                MySqlCommand addUserCmd = new MySqlCommand(
                    "INSERT INTO Utilisateurs (id, nom, prenom, adresse, telephone, email, mot_de_passe, type_utilisateur) " +
                    "VALUES (@id, @nom, @prenom, @adresse, @telephone, @email, @motDePasse, @typeUtilisateur)", connection);
                addUserCmd.Parameters.AddWithValue("@id", userId);
                addUserCmd.Parameters.AddWithValue("@nom", nom);
                addUserCmd.Parameters.AddWithValue("@prenom", prenom);
                addUserCmd.Parameters.AddWithValue("@adresse", adresse);
                addUserCmd.Parameters.AddWithValue("@telephone", telephone);
                addUserCmd.Parameters.AddWithValue("@email", email);
                addUserCmd.Parameters.AddWithValue("@motDePasse", motDePasse);
                addUserCmd.Parameters.AddWithValue("@typeUtilisateur", userType);
                addUserCmd.ExecuteNonQuery();

                Console.WriteLine($"‚úÖ Utilisateur {nom} {prenom} ajout√© avec succ√®s !");
            }
            else
            {
                reader.Close();
                Console.WriteLine($"üîπ Bienvenue {userId} !");
            }

            if (userType == "client")
            {
                Console.WriteLine("1Ô∏è‚É£ Voir la liste des plats");
                Console.WriteLine("2Ô∏è‚É£ Passer une commande");
                Console.WriteLine("3Ô∏è‚É£ Quitter");
                Console.Write("Votre choix : ");
                string choix = Console.ReadLine();

                if (choix == "1")
                {
                    Console.WriteLine("\nüçΩÔ∏è Liste des plats disponibles :");
                    for (int i = 0; i < platsExistants.Count; i++)
                    {
                        Console.WriteLine($"‚û°Ô∏è ID: {i + 1}, Plat: {platsExistants[i]}");
                    }
                }
                else if (choix == "2")
                {
                    Console.Write("Entrez l'ID du plat que vous voulez commander : ");
                    int platId = int.Parse(Console.ReadLine()) - 1;

                    if (platId < 0 || platId >= platsExistants.Count)
                    {
                        Console.WriteLine("‚ùå ID de plat invalide.");
                        return;
                    }

                    Console.Write("Quantit√© : ");
                    int quantite = int.Parse(Console.ReadLine());

                    string[] platDetails = platsExistants[platId].Split(" - ");
                    string nomPlat = platDetails[0];
                    decimal prix = decimal.Parse(platDetails[1].Replace("‚Ç¨", ""));

                    decimal total = prix * quantite;
                    Console.WriteLine($"\nüìù R√©capitulatif de la commande :");
                    Console.WriteLine($"- Plat : {nomPlat}");
                    Console.WriteLine($"- Quantit√© : {quantite}");
                    Console.WriteLine($"- Total : {total} ‚Ç¨");
                    Console.WriteLine($"- Temps de livraison estim√© : 30 minutes");

                    MySqlCommand addCommandeCmd = new MySqlCommand(
                        "INSERT INTO Commandes (client_id, total) VALUES (@clientId, @total)", connection);
                    addCommandeCmd.Parameters.AddWithValue("@clientId", userId);
                    addCommandeCmd.Parameters.AddWithValue("@total", total);
                    addCommandeCmd.ExecuteNonQuery();
                    Console.WriteLine($"‚úÖ Commande enregistr√©e avec succ√®s !");
                }
            }

            if (userType == "cuisinier")
            {
                Console.WriteLine("1Ô∏è‚É£ Ajouter un plat");
                Console.WriteLine("2Ô∏è‚É£ Consulter une commande");
                Console.Write("Votre choix : ");
                string choix = Console.ReadLine();

                if (choix == "1")
                {
                    Console.Write("Nom du plat : ");
                    string nomPlat = Console.ReadLine();
                    Console.Write("Prix : ");
                    decimal prix = decimal.Parse(Console.ReadLine());

                    platsExistants.Add($"{nomPlat} - {prix}‚Ç¨");
                    Console.WriteLine($"‚úÖ Plat ajout√© : {nomPlat} - {prix}‚Ç¨");
                }
                else if (choix == "2")
                {
                    Console.Write("Nom du client : ");
                    string nomClient = Console.ReadLine();
                    Console.Write("Pr√©nom du client : ");
                    string prenomClient = Console.ReadLine();

                    Random rand = new Random();
                    int randomPlatId = rand.Next(platsExistants.Count);
                    int quantite = rand.Next(1, 4);

                    string[] platDetails = platsExistants[randomPlatId].Split(" - ");
                    string nomPlat = platDetails[0];
                    decimal prix = decimal.Parse(platDetails[1].Replace("‚Ç¨", ""));
                    decimal total = prix * quantite;

                    Console.WriteLine($"\nüì¶ Commande de {nomClient} {prenomClient} :");
                    Console.WriteLine($"- Plat : {nomPlat}");
                    Console.WriteLine($"- Quantit√© : {quantite}");
                    Console.WriteLine($"- Total : {total} ‚Ç¨");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Erreur : {ex.Message}");
        }
        finally
        {
            connection.Close();
        }
    }
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////

-- Dans MySQL Workbench ou ligne de commande
DROP DATABASE IF EXISTS LivinParis;
CREATE DATABASE LivinParis;
USE LivinParis;

-- Table Utilisateurs
CREATE TABLE IF NOT EXISTS Utilisateurs (
    id VARCHAR(10) PRIMARY KEY,
    nom VARCHAR(50) NOT NULL,
    prenom VARCHAR(50) NOT NULL,
    adresse VARCHAR(255) NOT NULL,
    telephone VARCHAR(20) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    mot_de_passe VARCHAR(255) NOT NULL,
    type_utilisateur ENUM('client', 'cuisinier') NOT NULL,
    date_inscription DATETIME DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB;

-- Table Clients
CREATE TABLE IF NOT EXISTS Clients (
    id_utilisateur VARCHAR(10) PRIMARY KEY,
    est_entreprise BOOLEAN DEFAULT FALSE,
    nom_entreprise VARCHAR(100),
    nom_referent VARCHAR(50),
    FOREIGN KEY (id_utilisateur) REFERENCES Utilisateurs(id) ON DELETE CASCADE
) ENGINE=InnoDB;

-- Table Cuisiniers
CREATE TABLE IF NOT EXISTS Cuisiniers (
    id_utilisateur VARCHAR(10) PRIMARY KEY,
    note_moyenne DECIMAL(3,2) DEFAULT 0.0,
    nb_livraisons INT DEFAULT 0,
    FOREIGN KEY (id_utilisateur) REFERENCES Utilisateurs(id) ON DELETE CASCADE
) ENGINE=InnoDB;

-- Table Plats
CREATE TABLE IF NOT EXISTS Plats (
    id INT AUTO_INCREMENT PRIMARY KEY,
    cuisinier_id VARCHAR(10) NOT NULL,
    nom VARCHAR(100) NOT NULL,
    description TEXT,
    type ENUM('entree', 'plat_principal', 'dessert') NOT NULL,
    nb_personnes INT NOT NULL,
    date_fabrication DATE NOT NULL,
    date_peremption DATE NOT NULL,
    prix DECIMAL(10,2) NOT NULL,
    nationalite VARCHAR(50),
    regime VARCHAR(50),
    ingredients TEXT,
    disponible BOOLEAN DEFAULT TRUE,
    FOREIGN KEY (cuisinier_id) REFERENCES Cuisiniers(id_utilisateur) ON DELETE CASCADE
) ENGINE=InnoDB;

-- Table Commandes
CREATE TABLE IF NOT EXISTS Commandes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    client_id VARCHAR(10) NOT NULL,
    cuisinier_id VARCHAR(10) NOT NULL,
    date_commande DATETIME DEFAULT CURRENT_TIMESTAMP,
    total DECIMAL(10,2) NOT NULL,
    statut ENUM('en_attente', 'preparation', 'livraison', 'livree', 'annulee') DEFAULT 'en_attente',
    FOREIGN KEY (client_id) REFERENCES Clients(id_utilisateur),
    FOREIGN KEY (cuisinier_id) REFERENCES Cuisiniers(id_utilisateur)
) ENGINE=InnoDB;

-- Table PlatsCommandes
CREATE TABLE IF NOT EXISTS PlatsCommandes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    commande_id INT NOT NULL,
    plat_id INT NOT NULL,
    quantite INT NOT NULL,
    prix_unitaire DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (commande_id) REFERENCES Commandes(id) ON DELETE CASCADE,
    FOREIGN KEY (plat_id) REFERENCES Plats(id)
) ENGINE=InnoDB;
