// Complexité O(n³)  Surcharge inutile
public class FloydWarshall
{
    public static Dictionary<Noeud<T>, Dictionary<Noeud<T>, double>> CalculerTousLesPlusCourtsChemins<T>(Graphe<T> graphe)
    {
        var distances = new Dictionary<Noeud<T>, Dictionary<Noeud<T>, double>>();

        // Initialisation avec PositiveInfinity
        foreach (var source in graphe.Noeuds)
        {
            distances[source] = new Dictionary<Noeud<T>, double>();
            foreach (var dest in graphe.Noeuds)
            {
                distances[source][dest] = (source == dest) ? 0 : double.PositiveInfinity;
            }
        }

        // Remplir les arêtes existantes
        foreach (var noeud in graphe.Noeuds)
        {
            foreach (var arete in noeud.Aretes)
            {
                distances[noeud][arete.Destination] = arete.Poids;
            }
        }

        // Algorithme Floyd-Warshall
        foreach (var k in graphe.Noeuds)
        {
            foreach (var i in graphe.Noeuds)
            {
                foreach (var j in graphe.Noeuds)
                {
                    if (distances[i][k] != double.PositiveInfinity && 
                        distances[k][j] != double.PositiveInfinity &&
                        distances[i][j] > distances[i][k] + distances[k][j])
                    {
                        distances[i][j] = distances[i][k] + distances[k][j];
                    }
                }
            }
        }

        return distances;
    }
}
