// Complexité O((V + E) log V) Optimal 
public class Dijkstra
{
    public static Dictionary<Noeud<T>, double> TrouverCheminLePlusCourt<T>(Graphe<T> graphe, Noeud<T> source)
    {
        var distances = new Dictionary<Noeud<T>, double>();
        var previousNodes = new Dictionary<Noeud<T>, Noeud<T>>();
        var nodes = new List<Noeud<T>>();

        // Initialisation
        foreach (var noeud in graphe.Noeuds)
        {
            distances[noeud] = double.MaxValue;
            previousNodes[noeud] = null;
            nodes.Add(noeud);
        }
        distances[source] = 0;

        while (nodes.Count > 0)
        {
            // Trouver le nœud avec la distance minimale
            var noeudCourant = nodes.OrderBy(n => distances[n]).First();
            nodes.Remove(noeudCourant);

            // Mettre à jour les distances des voisins
            foreach (var arete in noeudCourant.Aretes)
            {
                var voisin = arete.Destination;
                var nouvelleDistance = distances[noeudCourant] + arete.Poids;

                if (nouvelleDistance < distances[voisin])
                {
                    distances[voisin] = nouvelleDistance;
                    previousNodes[voisin] = noeudCourant;
                }
            }
        }

        return distances;
    }
}
